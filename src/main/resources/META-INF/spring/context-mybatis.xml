<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/META-INF/mybatis/mybatis-config.xml"></property>
		
	</bean>
	<!--
		MapperScannerConfigurer
			- Mapper인터페이스 (DB Access작업이 정의된 인터페이스)에 대한
			  Mapper 인스턴스(DB Access작업이 정의된 인터페이스를 구현한 객체)를 생성한다.
			  * mybatis는 Mapper 인터페이스와 Mapper 파일(SQL 정의된 파일)을 참조해서 
			  	Mapper 파일에 정의된 SQL을 실행하는 구현객체를 자동으로 생성한다.
			- MapperScannerConfigurer는 basePackage로 지정된 패키지 경로에서
			   모든 인터페이스(Mapper 인터페이스)를 읽어와서 각각의 인터페이스에 대한
			   구현객체( SQL를 실행하는 코드가 포함된)를 생성하고, 그 구현체를 스프링의 빈을 등록한다. 
	  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--value라고 적은 이유? 그 빈의 이름을 적게 되어 있으므로 value로 적는다.  -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<!--basePackage로 등록한 인터페이스를 찾고 구현체를 만들어준다.  -->
		<property name="basePackage" value="kr.co.jhta.dao"></property>
	
	</bean>
</beans>


